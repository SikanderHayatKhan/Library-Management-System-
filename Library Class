package My1stClass;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

public class Library {
    public ArrayList<Book> books;
    public ArrayList<User> users;
    public Library(){
        this.books = new ArrayList<>();
        this.users = new ArrayList<>();
    }
    // method to add new books
    public void addNewBooks(Book book){
        books.add(book); //add method adds elements to arraylist
    }
    // method to add new users
    public void addNewUsers(User newUser){
        users.add(newUser);
    }
    // method to display info of entered books
    public void displayBooks(){
        System.out.println("\nDisplaying Available Books:\n");
        for(Book book : books){
            System.out.printf("%s%s%n%s%s%n%s%s%n%s%s%n%s%s%n%s", "Book Title: ", book.getBookTitle(), "Author's Name: ", book.getBookAuthor(), "Book ID: ", book.getBookId(), "Genre: ", book.getBookGenre(), "Availability: ", (book.getBookStatus()? "Available" : "Not Available"), "..................................................................\n\n");
        }
    }
    //method to checkout books along with error handling
    public void checkOut(User newUser, Book book){
        if(book.getBookStatus()){
            book.setBookStatus(false);
            newUser.borrowed_books.add(book);
            System.out.println("Book checked out successfully!!");
        }
        else{
            System.out.println("The book you are looking for is not available at the moment.");
        }
    }
    //method to return books along with error handling
    public void returning(User user, Book r_book){
        if(user.borrowed_books.contains(r_book))
        {
            user.borrowed_books.remove(r_book);
            r_book.setBookStatus(true);
            System.out.println("Book returned successfully!!");
        }
        else{
            System.out.println("You haven't borrowed this book from library.");
        }
    }
    //method to search books by author ot title
    public void searchBooks(String sbook){
        boolean bookfound = false;
        for(Book availbook:books){
            if ((availbook.getBookTitle().toLowerCase().contains(sbook.toLowerCase())) || (availbook.getBookAuthor().toLowerCase().contains(sbook.toLowerCase()))){
                System.out.println("Book ID: " + availbook.getBookId() + "\nBook Title: " + availbook.getBookTitle() + "\nBook Author: " + availbook.getBookAuthor()  + "\nBook Genre: " + availbook.getBookGenre() + "\n..................................................................\n");
                bookfound = true;
            }
        }
        if (!bookfound) {
            System.out.println("The Book you are searching for is not available in the Library Data.");
        }
    }
    // method to search users by name or user id
    public void searchUser(String suser){
        boolean userfound = false;
        for(User availuser:users){
            if (availuser.getUserName().toLowerCase().contains(suser.toLowerCase()) || availuser.getUserId().toLowerCase().contains(suser.toLowerCase())){
                System.out.println("Book ID: " + availuser.getUserId() + "\nBook Title: " + availuser.getUserName() + "\nBook Author: " + availuser.getUserContact() + "\n..........................................................\n");
                userfound = true;
            }
        }
        if (!userfound) {
            System.out.println("The User you are searching for is not available in the Library Data.");
        }
    }
    // method to save entered data
    public void saveData() {
        try (PrintWriter bookWriter = new PrintWriter("books.txt");
            PrintWriter userWriter = new PrintWriter("users.txt")) {

            // Save books
            for (Book book : books) {
                bookWriter.println(book.getBookId() + "," + book.getBookTitle() + "," + book.getBookAuthor() + "," + book.getBookGenre() + "," + book.getBookStatus());
            }

            // Save users
            for (User user : users) {
                userWriter.println(user.getUserId() + "," + user.getUserName() + "," + user.getUserContact());
            }

            System.out.println("Data saved successfully.");

        } catch (IOException e) {
            System.out.println("Error saving data: " + e.getMessage());
        }
    }
    // method to laod previously saved data
    public void loadData() {
        try (BufferedReader bookReader = new BufferedReader(new FileReader("books.txt"));
             BufferedReader userReader = new BufferedReader(new FileReader("users.txt"))) {

            // Load books
            String bookLine;
            while ((bookLine = bookReader.readLine()) != null) {
                String[] bookData = bookLine.split(",");
                boolean status = Boolean.parseBoolean(bookData[4]);
                Book loadedBook = new Book(bookData[0], bookData[1], bookData[2], bookData[3], status);
                books.add(loadedBook);
            }

            // Load users
            String userLine;
            while ((userLine = userReader.readLine()) != null) {
                String[] userData = userLine.split(",");
                User loadedUser = new User(userData[0], userData[1], userData[2]);
                users.add(loadedUser);
            }

            System.out.println("Data loaded successfully.");

        } catch (IOException e) {
            System.out.println("Error loading data: " + e.getMessage());
        }
    }
}
